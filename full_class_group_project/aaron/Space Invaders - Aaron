import turtle
from turtle import *
import random

# screen setup
screen = Screen()
screen.title("myscreen")
screen.bgcolor("black")
screen.tracer(0)

# global variables
aliens = []
game_running = True

# class that defines the player's ship
class playership:
    def __init__(self):
        self.turtle = Turtle()
        self.turtle.shape("triangle")
        self.turtle.color("white")
        self.turtle.penup()
        self.turtle.goto(0, -300)
        self.turtle.setheading(90)

    def move_left(self):
        if self.turtle.xcor() > -340:
            self.turtle.setx(self.turtle.xcor() - 20)

    def move_right(self):
        if self.turtle.xcor() < 340:
            self.turtle.setx(self.turtle.xcor() + 20)

    def get_x_position(self):
        return self.turtle.xcor()

    def get_y_position(self):
        return self.turtle.ycor()


# class that defines the laser
class laser:
    def __init__(self):
        self.turtle = Turtle()
        self.turtle.shape("square")
        self.turtle.color("red")
        self.turtle.setheading(90)
        self.turtle.shapesize(stretch_wid=1, stretch_len=50)
        self.turtle.penup()
        self.turtle.hideturtle()

    def hide_laser(self):
        self.turtle.hideturtle()

    def fire_laser(self):
        if not game_running:
            return

        # Get player position
        player_x_position = player_ship.get_x_position()
        player_y_position = player_ship.get_y_position()

        # Fire laser
        self.turtle.goto(player_x_position, player_y_position + 510)
        self.turtle.showturtle()

        # Check for alien hit with tolerance
        for alien_instance in aliens:
            if abs(alien_instance.get_x_position() - player_x_position) < 20:
                alien_instance.hide()
                aliens.remove(alien_instance)
                break

        # Hide laser shortly after
        screen.ontimer(self.hide_laser, 100)


# Base alien class
class alien:
    def __init__(self):
        self.turtle = turtle.Turtle()
        self.turtle.penup()
        self.turtle.setheading(270)

    def move(self):
        self.turtle.forward(self.speed)

    def get_x_position(self):
        return self.turtle.xcor()

    def get_y_position(self):
        return self.turtle.ycor()

    def hide(self):
        self.turtle.hideturtle()

# Characteristics subclass
class aliencharacteristics(alien):
    def __init__(self, shape, color, speed, y_spawn):
        super().__init__()
        self.turtle.shape(shape)
        self.turtle.color(color)
        self.speed = speed
        self.y_spawn = y_spawn
        self.turtle.goto(random.randint(-17, 17) * 20, self.y_spawn)

# Specific alien types
class normalalien(aliencharacteristics):
    def __init__(self):
        super().__init__("circle", "green", 0.8, 300)

class fastalien(aliencharacteristics):
    def __init__(self):
        super().__init__("triangle", "yellow", 1, 300)

class closealien(aliencharacteristics):
    def __init__(self):
        super().__init__("square", "blue", 0.6, 200)

# Message display turtle
message_writer = Turtle()
message_writer.hideturtle()
message_writer.color("white")
message_writer.penup()

def show_message(text):
    message_writer.clear()
    message_writer.goto(0, 0)
    message_writer.write(text, align="center", font=("Arial", 36, "bold"))

# Game reset function
def reset_game():
    global aliens, game_running
    message_writer.clear()
    for alien_instance in aliens:
        alien_instance.hide()
    aliens.clear()

    for _ in range(10):
        r = random.randint(1, 3)
        if r == 1:
            aliens.append(normalalien())
        elif r == 2:
            aliens.append(fastalien())
        else:
            aliens.append(closealien())

    laser_beam.hide_laser()
    player_ship.turtle.goto(0, -300)
    game_running = True

# Create game objects
player_ship = playership()
laser_beam = laser()

def setup_game():
    for _ in range(10):
        r = random.randint(1, 3)
        if r == 1:
            aliens.append(normalalien())
        elif r == 2:
            aliens.append(fastalien())
        else:
            aliens.append(closealien())

setup_game()

# Keyboard controls
screen.listen()
screen.onkeypress(player_ship.move_left, "Left")
screen.onkeypress(player_ship.move_right, "Right")
screen.onkeypress(laser_beam.fire_laser, "space")

# Game loop
def game_loop():
    global game_running

    if game_running:
        for alien_instance in aliens:
            alien_instance.move()
            if alien_instance.get_y_position() <= -300:
                game_running = False
                show_message("You Lost")
                screen.ontimer(reset_game, 2000)
                break

        if len(aliens) == 0 and game_running:
            game_running = False
            show_message("You Won")
            screen.ontimer(reset_game, 2000)

    screen.update()
    screen.ontimer(game_loop, 16)  # ~60 FPS

game_loop()
screen.mainloop()
