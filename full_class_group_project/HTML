<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Graphical Adventure Game</title>
  <style>
    .info {
      font-size: 25px;
      color: #000000;
      background-color: #088427;
      border: #000000;
      border-radius: 8px;
      padding: 10px;
      max-width: 750px;
      margin-left: 330px;
    }
    .download-button {
      padding: 12px;
      font-size: 50px;
      background-color: #1437d4;
      color: #ffffff;
      border: none;
      border-radius: 8px;
      text-decoration: none;
    }
    .download-button:hover {
      background-color: #4c66d8;
    }
    pre {
      background: #eee;
      padding: 10px;
      border-radius: 4px;
      overflow-x: auto;
      font-size: 14px;
      max-width: 800px;
      margin: 20px auto;
      text-align: left;
    }
  </style>
</head>
<body style="font-family: Impact, Haettenschweiler, 'Arial Narrow Bold', sans-serif; text-align: center; background-color: #0fc73d;">
  <h1 style="font-size: 80px;">Graphical Adventure Game</h1>
  <a class="download-button" href="https://drive.google.com/uc?export=download&amp;id=YOUR_FILE_ID_HERE">
    Download Adventure Game
  </a>
  <div style="padding:25px"></div>
  <div class="info">
    This is a Turtle-based graphical adventure game. Make sure you have Python 3 installed on your machine.  
    Once you download <code>game.py</code>, unzip it (if you zipped it), open a terminal (bash on Mac/Linux, Command Prompt or PowerShell on Windows) and type:
    <br><br>
    <code>python3 game.py</code>
  </div>

  <h2 style="font-size: 40px; margin-top: 50px; color: #fff;">Adventure Game Source Code</h2>
  <p style="color: #fff; font-size: 18px; margin-bottom: 10px;">
    You can’t run this in your browser unless you rewrite it in JavaScript. Copy and paste into a file named <code>game.py</code>.
  </p>
  <pre>
import turtle
from turtle import *

# Constants for map elements
PATH = 0
WALL = 1
RIVER = 2
MATERIALS = 3
KEYS = 4
DOORS = 5
FINISH = 6
BM_count = 0

# Create the turtles
t = turtle.Turtle()  # Map draw turtle
t.hideturtle()
p = turtle.Turtle()  # Player move turtle
c = turtle.Turtle()
t.speed(0)
p.speed(0)
screen = Screen()
screen.setup(750, 950)

# Map data (replace with your own adventure map if you want)
Map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 6, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1],
    [1, 1, 1, 1, 1, 0, 0, 1, 2, 1, 1, 1],
    [1, 1, 1, 1, 1, 0, 0, 0, 2, 1, 1, 1],
    [1, 3, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1],
    [1, 0, 1, 3, 0, 0, 2, 2, 4, 1, 1, 1],
    [1, 0, 1, 1, 1, 0, 3, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 2, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
    [1, 4, 1, 1, 1, 5, 1, 1, 1, 1, 1, 1],
    [1, 0, 3, 1, 1, 0, 1, 1, 1, 1, 1, 1],
    [1, 0, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1],
    [1, 3, 1, 1, 1, 0, 3, 0, 4, 0, 1, 1],
    [1, 0, 5, 1, 0, 0, 1, 1, 1, 2, 1, 1],
    [1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
]

# Start position of the turtles
x_start = -150
y_start = 150
box_size = 30

# Setup initial position for player
player_start_x = 5
player_start_y = 15

# Write game controls (don’t stare if you don’t understand)
def controls(t):
    screen.tracer(0)
    t.penup()
    t.goto(-150, 180)
    t.pendown()
    t.write("Move with arrow keys, press 'q' to quit", move=False, align='left', font=('Arial', 20, "normal"))
    t.hideturtle()
    screen.update()
    screen.tracer(1)

def map_to_screen(x, y):
    return x_start + x * box_size + 13, y_start - y * box_size - 13

# Setup player's turtle
p.penup()
p.shape("turtle")
player_x, player_y = map_to_screen(player_start_x, player_start_y)
p.goto(player_x, player_y)

Mats = 0
Keys = 0

def drawMap(currX, currY):
    print()
    for y in range(len(Map)):
        for x in range(len(Map[y])):
            if currX == x and currY == y:
                print("*  ", end="")
            elif Map[y][x] == RIVER:
                print("~  ", end="")
            elif Map[y][x] == MATERIALS:
                print("?  ", end="")
            elif Map[y][x] == KEYS:
                print("?  ", end="")
            elif Map[y][x] == PATH:
                print("   ", end="")
            elif Map[y][x] == DOORS:
                print("D  ", end="")
            elif Map[y][x] == FINISH:
                print("F  ", end="")
            else:
                print(Map[y][x], " ", end="")
        print()
    print()

def movePlayer(x, y, moveDir):
    global Map, Mats, Keys
    new_x, new_y = x, y
    if moveDir == "u":
        new_y -= 1
    elif moveDir == "d":
        new_y += 1
    elif moveDir == "l":
        new_x -= 1
    elif moveDir == "r":
        new_x += 1

    # Prevent walking into walls, rivers, or locked doors without keys/materials
    if 0 <= new_x < len(Map[0]) and 0 <= new_y < len(Map) and Map[new_y][new_x] not in (1, 2, 5):
        return new_x, new_y
    if Map[new_y][new_x] == RIVER:
        if Mats >= 1:
            Buildit = turtle.textinput("River!", "Use building materials to cross? (y/n): ")
            if Buildit.lower() == 'y':
                Map[new_y][new_x] = PATH
                Mats -= 1
                print("Building materials left:", Mats)
                t.clear()
                draw_map(Map, x_start, y_start, box_size)
                listen()
                return new_x, new_y
            else:
                print("You keep your building materials.")
                listen()
                return x, y
        else:
            print("You need building materials to cross this river.")
            return x, y
    if Map[new_y][new_x] == DOORS:
        if Keys >= 1:
            Unlock = turtle.textinput("Door!", "Unlock? (y/n): ")
            if Unlock.lower() == 'y':
                Map[new_y][new_x] = PATH
                Keys -= 1
                print("Keys left:", Keys)
                t.clear()
                draw_map(Map, x_start, y_start, box_size)
                listen()
                return new_x, new_y
            else:
                print("You chose not to unlock.")
                return x, y
        else:
            print("No keys to unlock this door.")
            return x, y
    print("Invalid move.")
    return x, y

def GAME_END(x, y):
    if Map[y][x] == FINISH:
        print("You Win!!!")
        turtle.bye()

def draw_square(size, color):
    t.fillcolor(color)
    t.begin_fill()
    for _ in range(4):
        t.forward(size)
        t.right(90)
    t.end_fill()

def get_color(element):
    if element == PATH:
        return ""
    elif element == WALL:
        return "black"
    elif element == RIVER:
        return "blue"
    elif element == MATERIALS:
        return "brown"
    elif element == KEYS:
        return "yellow"
    elif element == DOORS:
        return "orange"
    elif element == FINISH:
        return "green"

def draw_map(map_data, x_start, y_start, box_size):
    screen.tracer(0)
    t.penup()
    t.goto(x_start, y_start)
    t.pendown()
    for row in map_data:
        for element in row:
            color = get_color(element)
            draw_square(box_size, color)
            t.penup()
            t.forward(box_size)
            t.pendown()
        t.penup()
        t.goto(x_start, t.ycor() - box_size)
        t.pendown()
    screen.update()
    screen.tracer(1)

def item_grab(x, y):
    global Mats, Keys, Map, BM_count
    if Map[y][x] == MATERIALS and BM_count <= 2:
        decision = turtle.textinput("Materials!", "Pick up building materials? (y/n)")
        if decision == "y":
            Mats += 1
            print("Picked up materials. You have:", Mats)
            Map[y][x] = PATH
            BM_count += 1
            t.clear()
            draw_map(Map, x_start, y_start, box_size)
            listen()
        else:
            print("You ignored the materials.")
            listen()
    elif Map[y][x] == MATERIALS and BM_count == 3:
        decision1 = turtle.textinput("More mats?", "Pick them up? (y/n)")
        if decision1 == "y":
            Mats += 1
            print("Picked up materials. You have:", Mats)
            Map[y][x] = PATH
            BM_count += 1
            t.clear()
            draw_map(Map, x_start, y_start, box_size)
            listen()
        else:
            print("You ignored the materials again.")
            listen()
    elif Map[y][x] == MATERIALS and BM_count >= 4:
        BM_count = 0
        decision2 = turtle.textinput("Really?", "Pick it up? (y/n)")
        if decision2 == "y":
            Mats += 1
            print("Picked up materials. You have:", Mats)
            Map[y][x] = PATH
            BM_count += 1
            t.clear()
            draw_map(Map, x_start, y_start, box_size)
            listen()
        else:
            print("You still ignored them.")
            listen()
    if Map[y][x] == KEYS:
        key_pickup = turtle.textinput("Key found!", "Pick it up? (y/n)")
        if key_pickup.lower() == "y":
            Keys += 1
            print("Picked up a key! You have:", Keys)
            Map[y][x] = PATH
            t.clear()
            draw_map(Map, x_start, y_start, box_size)
            listen()
        else:
            print("Left the key behind.")
            listen()

# Movement controls
def move_up():
    global currX, currY
    p.setheading(90)
    currX, currY = movePlayer(currX, currY, "u")
    player_x, player_y = map_to_screen(currX, currY)
    p.goto(player_x, player_y)
    item_grab(currX, currY)
    GAME_END(currX, currY)

def move_down():
    global currX, currY
    p.setheading(270)
    currX, currY = movePlayer(currX, currY, "d")
    player_x, player_y = map_to_screen(currX, currY)
    p.goto(player_x, player_y)
    item_grab(currX, currY)
    GAME_END(currX, currY)

def move_left():
    global currX, currY
    p.setheading(180)
    currX, currY = movePlayer(currX, currY, "l")
    player_x, player_y = map_to_screen(currX, currY)
    p.goto(player_x, player_y)
    item_grab(currX, currY)
    GAME_END(currX, currY)

def move_right():
    global currX, currY
    p.setheading(0)
    currX, currY = movePlayer(currX, currY, "r")
    player_x, player_y = map_to_screen(currX, currY)
    p.goto(player_x, player_y)
    item_grab(currX, currY)
    GAME_END(currX, currY)

def quit_game():
    turtle.bye()

# Initialize and start
currX = player_start_x
currY = player_start_y
draw_map(Map, x_start, y_start, box_size)
controls(c)
listen()
onkey(move_up, "Up")
onkey(move_down, "Down")
onkey(move_left, "Left")
onkey(move_right, "Right")
onkey(quit_game, "q")
t.hideturtle()
done()
  </pre>
  <p style="color: #fff; font-size: 18px; margin-top: 10px;">
    If you’re expecting this to launch in your browser, you’re delusional. Download <code>game.py</code> and run:
    <br><br>
    <code>python3 game.py</code>
  </p>
</body>
</html>
