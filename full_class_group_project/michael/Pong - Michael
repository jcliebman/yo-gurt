import pygame
import sys
import random
import time

pygame.init()

# Constants
WIDTH, HEIGHT = 800, 600
WHITE = (255, 255, 255)
GRAY = (100, 100, 100)
BLACK = (0, 0, 0)
PADDLE_WIDTH, PADDLE_HEIGHT = 15, 100
BALL_SIZE = 20
FPS = 60
FONT = pygame.font.SysFont("Arial", 15)

# Screen
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pong with Different Modes and Power-ups!")

# Entities
player = pygame.Rect(WIDTH - 30, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)
opponent = pygame.Rect(15, HEIGHT // 2 - PADDLE_HEIGHT // 2, PADDLE_WIDTH, PADDLE_HEIGHT)
ball = pygame.Rect(WIDTH // 2, HEIGHT // 2, BALL_SIZE, BALL_SIZE)

# Movement
ball_speed_map = {"Easy": 6, "Medium": 8, "Hard": 11}
ball_speed_x = 8
ball_speed_y = 8
player_speed = 0
opponent_speed = 7
player_super_speed = 10
opponent_super_speed = 7

# Score
player_score = 0
opponent_score = 0

# AI settings
ai_error_chance = {"Easy": 0.5, "Medium": 0.25, "Hard": 0.05}
difficulty = "Medium"
ai_enabled = True

# Freeze timers
player_frozen = False
player_frozen_end = 0
opponent_frozen = False
opponent_frozen_end = 0

# Ball stop timer
ball_stopped = False
ball_stop_timer = 0

# Power-up linked list classes
class PowerUpNode:
    def __init__(self, powerup):
        self.powerup = powerup
        self.next = None

class PowerUpList:
    def __init__(self):
        self.head = None

    def add_powerup(self, powerup):
        new_node = PowerUpNode(powerup)
        if not self.head:
            self.head = new_node
        else:
            current = self.head
            while current.next:
                current = current.next
            current.next = new_node

    def pop_first(self):
        if not self.head:
            return None
        powerup = self.head.powerup
        self.head = self.head.next
        return powerup

    def is_empty(self):
        return self.head is None

    def __str__(self):
        result = []
        current = self.head
        while current:
            result.append(current.powerup)
            current = current.next
        return " -> ".join(result) if result else "None"

# Power-ups (linked lists)
player_powerups = PowerUpList()
opponent_powerups = PowerUpList()

# Clock
clock = pygame.time.Clock()

def menu_loop(options):
    index = 0
    while True:
        screen.fill(BLACK)
        title = FONT.render("Select Option:", True, WHITE)
        screen.blit(title, (WIDTH // 2 - title.get_width() // 2, 100))

        for i, option in enumerate(options): 
            color = WHITE if i == index else GRAY
            text = FONT.render(option, True, color)
            screen.blit(text, (WIDTH // 2 - text.get_width() // 2, 200 + i * 50))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_UP:
                    index = (index - 1) % len(options)
                elif event.key == pygame.K_DOWN:
                    index = (index + 1) % len(options)
                elif event.key == pygame.K_RETURN:
                    return options[index]

def assign_powerups():
    choices = ["Super Speed", "Freeze", "Stop Ball"]
    # Clear old power-ups and add 1-3 new ones randomly
    player_powerups.head = None
    opponent_powerups.head = None
    for _ in range(random.randint(1, 3)):
        player_powerups.add_powerup(random.choice(choices))
        opponent_powerups.add_powerup(random.choice(choices))

def reset_ball():
    global ball_speed_x, ball_speed_y, ball_stopped, ball_stop_timer
    ball.center = (WIDTH // 2, HEIGHT // 2)
    ball_speed_x = ball_speed_map[difficulty] * random.choice((1, -1))
    ball_speed_y = ball_speed_map[difficulty] * random.choice((1, -1))
    ball_stopped = False
    ball_stop_timer = 0
    assign_powerups()

mode = menu_loop(["Single Player", "Two Player"])
ai_enabled = (mode == "Single Player")
if ai_enabled:
    difficulty = menu_loop(["Easy", "Medium", "Hard"])
reset_ball()

powerup_message = ""
powerup_message_end_time = 0

running = True
player_speed = 0
opponent_speed = 0

while running:
    now = pygame.time.get_ticks()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            # Player 1 paddle movement
            if not player_frozen:
                if event.key == pygame.K_UP:
                    player_speed = -player_super_speed
                elif event.key == pygame.K_DOWN:
                    player_speed = player_super_speed
            # Player 2 paddle movement (or AI)
            if not ai_enabled and not opponent_frozen:
                if event.key == pygame.K_w:
                    opponent_speed = -opponent_super_speed
                elif event.key == pygame.K_s:
                    opponent_speed = opponent_super_speed

            # Player 1 uses powerup (Right Shift)
            if event.key == pygame.K_RSHIFT and not player_powerups.is_empty():
                used_powerup = player_powerups.pop_first()
                if used_powerup == "Super Speed":
                    powerup_message = "Player 1 used SUPER SPEED!"
                    # Super speed active while holding keys (already handled)
                elif used_powerup == "Freeze":
                    opponent_frozen = True
                    opponent_frozen_end = now + 2000
                    powerup_message = "Player 1 froze opponent for 2 seconds!"
                elif used_powerup == "Stop Ball":
                    ball_stopped = True
                    ball_stop_timer = now + 2000
                    powerup_message = "Player 1 stopped the ball for 2 seconds!"
                powerup_message_end_time = now + 2000

            # Player 2 uses powerup (Left Shift)
            if not ai_enabled and event.key == pygame.K_LSHIFT and not opponent_powerups.is_empty():
                used_powerup = opponent_powerups.pop_first()
                if used_powerup == "Super Speed":
                    powerup_message = "Player 2 used SUPER SPEED!"
                elif used_powerup == "Freeze":
                    player_frozen = True
                    player_frozen_end = now + 2000
                    powerup_message = "Player 2 froze opponent for 2 seconds!"
                elif used_powerup == "Stop Ball":
                    ball_stopped = True
                    ball_stop_timer = now + 2000
                    powerup_message = "Player 2 stopped the ball for 2 seconds!"
                powerup_message_end_time = now + 2000

        if event.type == pygame.KEYUP:
            if event.key in (pygame.K_UP, pygame.K_DOWN):
                player_speed = 0
            if not ai_enabled and event.key in (pygame.K_w, pygame.K_s):
                opponent_speed = 0

    # Update freeze state
    if player_frozen and now > player_frozen_end:
        player_frozen = False
    if opponent_frozen and now > opponent_frozen_end:
        opponent_frozen = False

    # Ball movement
    if not ball_stopped:
        ball.x += ball_speed_x
        ball.y += ball_speed_y
    else:
        if now > ball_stop_timer:
            ball_stopped = False

    # Paddle movement
    if not player_frozen:
        player.y += player_speed
    if player.top < 0:
        player.top = 0
    if player.bottom > HEIGHT:
        player.bottom = HEIGHT

    if ai_enabled:
        if not opponent_frozen:
            if random.random() > ai_error_chance[difficulty]:
                if opponent.centery < ball.centery:
                    opponent.y += 7
                elif opponent.centery > ball.centery:
                    opponent.y -= 7
    else:
        if not opponent_frozen:
            opponent.y += opponent_speed

    if opponent.top < 0:
        opponent.top = 0
    if opponent.bottom > HEIGHT:
        opponent.bottom = HEIGHT

    # Ball collision
    if ball.top <= 0 or ball.bottom >= HEIGHT:
        ball_speed_y *= -1
    if ball.colliderect(player) or ball.colliderect(opponent):
        ball_speed_x *= -1

    # Score check
    if ball.left <= 0:
        player_score += 1
        reset_ball()
    if ball.right >= WIDTH:
        opponent_score += 1
        reset_ball()

    # Game over
    if player_score == 10 or opponent_score == 10:
        screen.fill(BLACK)
        winner = "Player" if player_score == 10 else "Opponent"
        message = FONT.render(f"{winner} wins! Press any key to quit.", True, WHITE)
        screen.blit(message, (WIDTH // 2 - message.get_width() // 2, HEIGHT // 2))
        pygame.display.flip()
        pygame.event.clear()
        pygame.event.wait()
        break

    # Draw everything
    screen.fill(BLACK)
    pygame.draw.rect(screen, WHITE, player)
    pygame.draw.rect(screen, WHITE, opponent)
    pygame.draw.ellipse(screen, WHITE, ball)
    pygame.draw.aaline(screen, WHITE, (WIDTH // 2, 0), (WIDTH // 2, HEIGHT))

    # Draw scores
    player_text = FONT.render(str(player_score), True, WHITE)
    opponent_text = FONT.render(str(opponent_score), True, WHITE)
    screen.blit(player_text, (WIDTH // 2 + 20, 60))
    screen.blit(opponent_text, (WIDTH // 2 - 40, 60))

    # Show power-up info (linked list)
    player_powerup_text = FONT.render(f"P1 Power-ups: {str(player_powerups)}", True, WHITE)
    opponent_powerup_text = FONT.render(f"P2 Power-ups: {str(opponent_powerups)}", True, WHITE)

    screen.blit(player_powerup_text, (WIDTH // 2 + 30, 10))
    screen.blit(opponent_powerup_text, (WIDTH // 2 - 400, 10))

    
    if powerup_message and now < powerup_message_end_time:
        message_surface = FONT.render(powerup_message, True, WHITE)
        screen.blit(message_surface, (WIDTH // 2 - message_surface.get_width() // 2, HEIGHT - 50))
    else:
        powerup_message = ""

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
